{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Harsh\\\\OneDrive\\\\Desktop\\\\clone\\\\Network-Flow-Defense\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react'; // useEffect removed\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { getNewGame, runSimulation, getMlSuggestion } from './utils/api';\nimport './App.css';\n\n// --- Color Constants ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst COLORS = {\n  default: '#aaa',\n  source: '#ff4136',\n  // Red\n  target: '#0074d9',\n  // Blue\n  firewall: '#ff851b',\n  // Orange\n  ml_suggestion: '#2ecc40',\n  // Green\n  infected: '#b10dc9' // Purple\n};\n\n// --- Home Screen Component ---\nfunction HomeScreen({\n  onStartGame\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/my-logo.png\",\n        alt: \"Logo\",\n        className: \"home-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Network Flow Defence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A \\\"Patient Zero\\\" (red) is trying to infect a \\\"Critical Patient\\\" (blue).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your job is to build firewalls on nodes to stop the infection before it reaches the target.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary btn-large\",\n        onClick: onStartGame,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n// --- Modal Component ---\n_c = HomeScreen;\nfunction Modal({\n  isOpen,\n  title,\n  message,\n  score,\n  success,\n  onNextLevel,\n  onRetry,\n  onClose\n}) {\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), score !== null && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-buttons\",\n        children: success ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: onNextLevel,\n          children: \"Next Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning\",\n            onClick: onRetry,\n            children: \"Retry Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: onClose,\n            children: \"Main Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n// --- Main App Component ---\n_c2 = Modal;\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState('HOME'); // 'HOME' | 'PLAYING'\n  const [level, setLevel] = useState(1);\n  const [totalScore, setTotalScore] = useState(0);\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    links: []\n  });\n  const [sourceNode, setSourceNode] = useState(null);\n  const [targetNode, setTargetNode] = useState(null);\n  const [selectedNodes, setSelectedNodes] = useState(new Set());\n  const [mlSuggestions, setMlSuggestions] = useState(new Set());\n\n  // --- Unused variables removed ---\n  const [gameMessage, setGameMessage] = useState('Loading...');\n  // const [simulationResult, setSimulationResult] = useState(null); // Removed\n  // const [scoringResult, setScoringResult] = useState(null); // Removed\n\n  const [isSimulating, setIsSimulating] = useState(false);\n  const [infectedNodes, setInfectedNodes] = useState(new Set());\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalContent, setModalContent] = useState({\n    title: '',\n    message: '',\n    score: null,\n    success: false\n  });\n  const fgRef = useRef();\n\n  // Load a new game (a new level)\n  const newGame = useCallback(() => {\n    setIsSimulating(false);\n    // setSimulationResult(null); // No longer needed\n    // setScoringResult(null); // No longer needed\n    setSelectedNodes(new Set());\n    setMlSuggestions(new Set());\n    setInfectedNodes(new Set());\n    setGameMessage('Loading new level...');\n    getNewGame().then(response => {\n      const {\n        graph,\n        source,\n        target\n      } = response.data;\n      graph.nodes.forEach(node => {\n        node.val = 8; // node size\n      });\n      setGraphData(graph);\n      setSourceNode(source);\n      setTargetNode(target);\n      setGameMessage('Level loaded. Place your firewalls.');\n    }).catch(err => {\n      console.error(err);\n      setGameMessage('Error loading game. Please try again.');\n    });\n  }, []);\n\n  // Start a brand new game from the home screen\n  const startGame = () => {\n    setLevel(1);\n    setTotalScore(0);\n    setGameState('PLAYING');\n    newGame();\n  };\n\n  // Return to the home screen\n  const goHome = () => {\n    setGameState('HOME');\n  };\n\n  // Handle clicking on a node\n  const handleNodeClick = useCallback(node => {\n    if (isSimulating || node.id === sourceNode || node.id === targetNode) {\n      return;\n    }\n    const newSelectedNodes = new Set(selectedNodes);\n    if (newSelectedNodes.has(node.id)) {\n      newSelectedNodes.delete(node.id);\n    } else {\n      newSelectedNodes.add(node.id);\n    }\n    setSelectedNodes(newSelectedNodes);\n  }, [selectedNodes, sourceNode, targetNode, isSimulating]);\n\n  // Get ML Suggestions\n  const fetchMlSuggestions = () => {\n    setGameMessage('Calculating ML suggestions...');\n    getMlSuggestion(graphData, sourceNode, targetNode, 5).then(response => {\n      setMlSuggestions(new Set(response.data.top_k_nodes));\n      setGameMessage('ML suggestions loaded.');\n    }).catch(err => {\n      console.error(err);\n      setGameMessage('Error getting ML suggestions.');\n    });\n  };\n\n  // Run the Simulation\n  const handleRunSimulation = () => {\n    setIsSimulating(true);\n    setGameMessage('Simulation running...');\n    setInfectedNodes(new Set([sourceNode]));\n    setMlSuggestions(new Set());\n    // setSimulationResult(null); // No longer needed\n    // setScoringResult(null); // No longer needed\n\n    runSimulation(graphData, sourceNode, targetNode, Array.from(selectedNodes)).then(response => {\n      const {\n        simulation,\n        scoring\n      } = response.data;\n      // setSimulationResult(simulation); // No longer needed\n      // setScoringResult(scoring); // No longer needed\n\n      // --- Animate the result ---\n      const {\n        infection_order\n      } = simulation;\n      if (infection_order.length <= 1) {\n        handleSimulationEnd(scoring);\n        return;\n      }\n      infection_order.forEach((nodeId, index) => {\n        setTimeout(() => {\n          setInfectedNodes(prev => new Set(prev).add(nodeId));\n          if (index === infection_order.length - 1) {\n            handleSimulationEnd(scoring);\n          }\n        }, index * 200); // 200ms delay per step\n      });\n    }).catch(err => {\n      console.error(err);\n      setIsSimulating(false);\n      setGameMessage('Error running simulation.');\n    });\n  };\n\n  // Handle the end of a simulation\n  const handleSimulationEnd = scoring => {\n    if (scoring.score > 0) {\n      setModalContent({\n        title: 'Yayy! Level Complete!',\n        message: scoring.message,\n        score: scoring.score,\n        success: true\n      });\n    } else {\n      setModalContent({\n        title: 'Oh no! Target Infected!',\n        message: scoring.message,\n        score: scoring.score,\n        success: false\n      });\n    }\n    setIsModalOpen(true); // Open the modal\n  };\n\n  // --- Modal Button Handlers ---\n  const handleNextLevel = () => {\n    setTotalScore(prevScore => prevScore + modalContent.score);\n    setLevel(prevLevel => prevLevel + 1);\n    setIsModalOpen(false);\n    newGame();\n  };\n  const handleRetry = () => {\n    setIsModalOpen(false);\n    setIsSimulating(false);\n    // setSimulationResult(null); // No longer needed\n    // setScoringResult(null); // No longer needed\n    setSelectedNodes(new Set());\n    setInfectedNodes(new Set());\n    setGameMessage('Try again! Place your firewalls.');\n  };\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n    goHome();\n  };\n\n  // --- Node Coloring Logic ---\n  const getNodeColor = useCallback(node => {\n    if (infectedNodes.has(node.id)) {\n      return COLORS.infected;\n    }\n    if (node.id === sourceNode) {\n      return COLORS.source;\n    }\n    if (node.id === targetNode) {\n      return COLORS.target;\n    }\n    if (selectedNodes.has(node.id)) {\n      return COLORS.firewall;\n    }\n    if (mlSuggestions.has(node.id)) {\n      return COLORS.ml_suggestion;\n    }\n    return COLORS.default;\n  }, [infectedNodes, sourceNode, targetNode, selectedNodes, mlSuggestions]);\n\n  // --- Main Render ---\n\n  if (gameState === 'HOME') {\n    return /*#__PURE__*/_jsxDEV(HomeScreen, {\n      onStartGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      ...modalContent,\n      onNextLevel: handleNextLevel,\n      onRetry: handleRetry,\n      onClose: handleModalClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/my-logo.png\",\n          alt: \"Logo\",\n          style: {\n            height: '50px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: goHome,\n          children: \"Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-display\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Level: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: level\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Total Score: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: totalScore\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(ForceGraph2D, {\n        ref: fgRef,\n        graphData: graphData,\n        nodeColor: getNodeColor,\n        linkColor: () => '#555',\n        linkWidth: 2,\n        onNodeClick: handleNodeClick,\n        nodeCanvasObject: (node, ctx, globalScale) => {\n          const label = node.id;\n          const fontSize = 12 / globalScale;\n          ctx.font = `${fontSize}px Sans-Serif`;\n          ctx.textAlign = 'center';\n          ctx.textBaseline = 'middle';\n          const color = getNodeColor(node);\n          ctx.fillStyle = color;\n          ctx.beginPath();\n          ctx.arc(node.x, node.y, 6, 0, 2 * Math.PI, false);\n          ctx.fill();\n          ctx.fillStyle = '#fff';\n          ctx.fillText(label, node.x, node.y);\n        },\n        nodeCanvasObjectMode: () => 'after',\n        autoPauseRedraw: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"floating-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 14\n          }, this), \" \", gameMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleRunSimulation,\n          disabled: isSimulating,\n          children: isSimulating ? 'Simulating...' : 'Run Simulation'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-warning\",\n          onClick: fetchMlSuggestions,\n          disabled: isSimulating,\n          children: \"Get ML Suggestion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Legend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"legend\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: COLORS.source\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this), \" Patient Zero (Source)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: COLORS.target\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 17\n            }, this), \" Critical Patient (Target)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: COLORS.firewall\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 17\n            }, this), \" Your Firewall\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: COLORS.ml_suggestion\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 17\n            }, this), \" ML Suggestion\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: COLORS.infected\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 17\n            }, this), \" Infected Node\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: COLORS.default\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 17\n            }, this), \" Safe Node\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WwpJ9xkvp5lF+JBSbZx1cnctgBM=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"HomeScreen\");\n$RefreshReg$(_c2, \"Modal\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ForceGraph2D","getNewGame","runSimulation","getMlSuggestion","jsxDEV","_jsxDEV","Fragment","_Fragment","COLORS","default","source","target","firewall","ml_suggestion","infected","HomeScreen","onStartGame","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Modal","isOpen","title","message","score","success","onNextLevel","onRetry","onClose","_c2","App","_s","gameState","setGameState","level","setLevel","totalScore","setTotalScore","graphData","setGraphData","nodes","links","sourceNode","setSourceNode","targetNode","setTargetNode","selectedNodes","setSelectedNodes","Set","mlSuggestions","setMlSuggestions","gameMessage","setGameMessage","isSimulating","setIsSimulating","infectedNodes","setInfectedNodes","isModalOpen","setIsModalOpen","modalContent","setModalContent","fgRef","newGame","then","response","graph","data","forEach","node","val","catch","err","console","error","startGame","goHome","handleNodeClick","id","newSelectedNodes","has","delete","add","fetchMlSuggestions","top_k_nodes","handleRunSimulation","Array","from","simulation","scoring","infection_order","length","handleSimulationEnd","nodeId","index","setTimeout","prev","handleNextLevel","prevScore","prevLevel","handleRetry","handleModalClose","getNodeColor","style","height","ref","nodeColor","linkColor","linkWidth","onNodeClick","nodeCanvasObject","ctx","globalScale","label","fontSize","font","textAlign","textBaseline","color","fillStyle","beginPath","arc","x","y","Math","PI","fill","fillText","nodeCanvasObjectMode","autoPauseRedraw","disabled","backgroundColor","_c3","$RefreshReg$"],"sources":["C:/Users/Harsh/OneDrive/Desktop/clone/Network-Flow-Defense/frontend/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react'; // useEffect removed\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { getNewGame, runSimulation, getMlSuggestion } from './utils/api';\nimport './App.css';\n\n// --- Color Constants ---\nconst COLORS = {\n  default: '#aaa',\n  source: '#ff4136', // Red\n  target: '#0074d9', // Blue\n  firewall: '#ff851b', // Orange\n  ml_suggestion: '#2ecc40', // Green\n  infected: '#b10dc9', // Purple\n};\n\n// --- Home Screen Component ---\nfunction HomeScreen({ onStartGame }) {\n  return (\n    <div className=\"home-screen\">\n      <div className=\"home-content\">\n        <img src=\"/my-logo.png\" alt=\"Logo\" className=\"home-logo\" />\n        <h1>Network Flow Defence</h1>\n        <p>A \"Patient Zero\" (red) is trying to infect a \"Critical Patient\" (blue).</p>\n        <p>Your job is to build firewalls on nodes to stop the infection before it reaches the target.</p>\n        <button className=\"btn btn-primary btn-large\" onClick={onStartGame}>\n          Start Game\n        </button>\n      </div>\n    </div>\n  );\n}\n\n// --- Modal Component ---\nfunction Modal({\n  isOpen,\n  title,\n  message,\n  score,\n  success,\n  onNextLevel,\n  onRetry,\n  onClose,\n}) {\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content\">\n        <h2>{title}</h2>\n        {score !== null && <h3>Score: {score}</h3>}\n        <p>{message}</p>\n        <div className=\"modal-buttons\">\n          {success ? (\n            <button className=\"btn btn-success\" onClick={onNextLevel}>\n              Next Level\n            </button>\n          ) : (\n            <>\n              <button className=\"btn btn-warning\" onClick={onRetry}>\n                Retry Level\n              </button>\n              <button className=\"btn btn-secondary\" onClick={onClose}>\n                Main Menu\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// --- Main App Component ---\nfunction App() {\n  const [gameState, setGameState] = useState('HOME'); // 'HOME' | 'PLAYING'\n  const [level, setLevel] = useState(1);\n  const [totalScore, setTotalScore] = useState(0);\n\n  const [graphData, setGraphData] = useState({ nodes: [], links: [] });\n  const [sourceNode, setSourceNode] = useState(null);\n  const [targetNode, setTargetNode] = useState(null);\n  const [selectedNodes, setSelectedNodes] = useState(new Set());\n  const [mlSuggestions, setMlSuggestions] = useState(new Set());\n  \n  // --- Unused variables removed ---\n  const [gameMessage, setGameMessage] = useState('Loading...');\n  // const [simulationResult, setSimulationResult] = useState(null); // Removed\n  // const [scoringResult, setScoringResult] = useState(null); // Removed\n  \n  const [isSimulating, setIsSimulating] = useState(false);\n  const [infectedNodes, setInfectedNodes] = useState(new Set());\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalContent, setModalContent] = useState({\n    title: '',\n    message: '',\n    score: null,\n    success: false,\n  });\n\n  const fgRef = useRef();\n\n  // Load a new game (a new level)\n  const newGame = useCallback(() => {\n    setIsSimulating(false);\n    // setSimulationResult(null); // No longer needed\n    // setScoringResult(null); // No longer needed\n    setSelectedNodes(new Set());\n    setMlSuggestions(new Set());\n    setInfectedNodes(new Set());\n    setGameMessage('Loading new level...');\n\n    getNewGame()\n      .then((response) => {\n        const { graph, source, target } = response.data;\n        graph.nodes.forEach((node) => {\n          node.val = 8; // node size\n        });\n        setGraphData(graph);\n        setSourceNode(source);\n        setTargetNode(target);\n        setGameMessage('Level loaded. Place your firewalls.');\n      })\n      .catch((err) => {\n        console.error(err);\n        setGameMessage('Error loading game. Please try again.');\n      });\n  }, []);\n\n  // Start a brand new game from the home screen\n  const startGame = () => {\n    setLevel(1);\n    setTotalScore(0);\n    setGameState('PLAYING');\n    newGame();\n  };\n\n  // Return to the home screen\n  const goHome = () => {\n    setGameState('HOME');\n  };\n\n  // Handle clicking on a node\n  const handleNodeClick = useCallback(\n    (node) => {\n      if (isSimulating || node.id === sourceNode || node.id === targetNode) {\n        return;\n      }\n      const newSelectedNodes = new Set(selectedNodes);\n      if (newSelectedNodes.has(node.id)) {\n        newSelectedNodes.delete(node.id);\n      } else {\n        newSelectedNodes.add(node.id);\n      }\n      setSelectedNodes(newSelectedNodes);\n    },\n    [selectedNodes, sourceNode, targetNode, isSimulating]\n  );\n\n  // Get ML Suggestions\n  const fetchMlSuggestions = () => {\n    setGameMessage('Calculating ML suggestions...');\n    getMlSuggestion(graphData, sourceNode, targetNode, 5)\n      .then((response) => {\n        setMlSuggestions(new Set(response.data.top_k_nodes));\n        setGameMessage('ML suggestions loaded.');\n      })\n      .catch((err) => {\n        console.error(err);\n        setGameMessage('Error getting ML suggestions.');\n      });\n  };\n\n  // Run the Simulation\n  const handleRunSimulation = () => {\n    setIsSimulating(true);\n    setGameMessage('Simulation running...');\n    setInfectedNodes(new Set([sourceNode]));\n    setMlSuggestions(new Set());\n    // setSimulationResult(null); // No longer needed\n    // setScoringResult(null); // No longer needed\n\n    runSimulation(\n      graphData,\n      sourceNode,\n      targetNode,\n      Array.from(selectedNodes)\n    )\n      .then((response) => {\n        const { simulation, scoring } = response.data;\n        // setSimulationResult(simulation); // No longer needed\n        // setScoringResult(scoring); // No longer needed\n\n        // --- Animate the result ---\n        const { infection_order } = simulation;\n        if (infection_order.length <= 1) {\n          handleSimulationEnd(scoring);\n          return;\n        }\n\n        infection_order.forEach((nodeId, index) => {\n          setTimeout(() => {\n            setInfectedNodes((prev) => new Set(prev).add(nodeId));\n            if (index === infection_order.length - 1) {\n              handleSimulationEnd(scoring);\n            }\n          }, index * 200); // 200ms delay per step\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        setIsSimulating(false);\n        setGameMessage('Error running simulation.');\n      });\n  };\n\n  // Handle the end of a simulation\n  const handleSimulationEnd = (scoring) => {\n    if (scoring.score > 0) {\n      setModalContent({\n        title: 'Yayy! Level Complete!',\n        message: scoring.message,\n        score: scoring.score,\n        success: true,\n      });\n    } else {\n      setModalContent({\n        title: 'Oh no! Target Infected!',\n        message: scoring.message,\n        score: scoring.score,\n        success: false,\n      });\n    }\n    setIsModalOpen(true); // Open the modal\n  };\n\n  // --- Modal Button Handlers ---\n  const handleNextLevel = () => {\n    setTotalScore((prevScore) => prevScore + modalContent.score);\n    setLevel((prevLevel) => prevLevel + 1);\n    setIsModalOpen(false);\n    newGame();\n  };\n\n  const handleRetry = () => {\n    setIsModalOpen(false);\n    setIsSimulating(false);\n    // setSimulationResult(null); // No longer needed\n    // setScoringResult(null); // No longer needed\n    setSelectedNodes(new Set());\n    setInfectedNodes(new Set());\n    setGameMessage('Try again! Place your firewalls.');\n  };\n\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n    goHome();\n  };\n\n  // --- Node Coloring Logic ---\n  const getNodeColor = useCallback(\n    (node) => {\n      if (infectedNodes.has(node.id)) {\n        return COLORS.infected;\n      }\n      if (node.id === sourceNode) {\n        return COLORS.source;\n      }\n      if (node.id === targetNode) {\n        return COLORS.target;\n      }\n      if (selectedNodes.has(node.id)) {\n        return COLORS.firewall;\n      }\n      if (mlSuggestions.has(node.id)) {\n        return COLORS.ml_suggestion;\n      }\n      return COLORS.default;\n    },\n    [infectedNodes, sourceNode, targetNode, selectedNodes, mlSuggestions]\n  );\n\n  // --- Main Render ---\n\n  if (gameState === 'HOME') {\n    return <HomeScreen onStartGame={startGame} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <Modal\n        isOpen={isModalOpen}\n        {...modalContent}\n        onNextLevel={handleNextLevel}\n        onRetry={handleRetry}\n        onClose={handleModalClose}\n      />\n\n      <header>\n        <div className=\"header-left\">\n          <img src=\"/my-logo.png\" alt=\"Logo\" style={{ height: '50px' }} />\n          <button className=\"btn btn-secondary\" onClick={goHome}>\n            Main Menu\n          </button>\n        </div>\n        <div className=\"score-display\">\n          <div>Level: <strong>{level}</strong></div>\n          <div>Total Score: <strong>{totalScore}</strong></div>\n        </div>\n      </header>\n\n      <div className=\"game-container\">\n        <ForceGraph2D\n          ref={fgRef}\n          graphData={graphData}\n          nodeColor={getNodeColor}\n          linkColor={() => '#555'}\n          linkWidth={2}\n          onNodeClick={handleNodeClick}\n          nodeCanvasObject={(node, ctx, globalScale) => {\n            const label = node.id;\n            const fontSize = 12 / globalScale;\n            ctx.font = `${fontSize}px Sans-Serif`;\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            const color = getNodeColor(node);\n            ctx.fillStyle = color;\n            ctx.beginPath();\n            ctx.arc(node.x, node.y, 6, 0, 2 * Math.PI, false);\n            ctx.fill();\n            ctx.fillStyle = '#fff';\n            ctx.fillText(label, node.x, node.y);\n          }}\n          nodeCanvasObjectMode={() => 'after'}\n          autoPauseRedraw={false}\n        />\n\n        <div className=\"floating-controls\">\n          <h2>Controls</h2>\n          <p><strong>Status:</strong> {gameMessage}</p>\n          <button\n            className=\"btn btn-primary\"\n            onClick={handleRunSimulation}\n            disabled={isSimulating}\n          >\n            {isSimulating ? 'Simulating...' : 'Run Simulation'}\n          </button>\n          <button\n            className=\"btn btn-warning\"\n            onClick={fetchMlSuggestions}\n            disabled={isSimulating}\n          >\n            Get ML Suggestion\n          </button>\n          <hr />\n          <h2>Legend</h2>\n          <ul className=\"legend\">\n            <li><div className=\"legend-color\" style={{backgroundColor: COLORS.source}}></div> Patient Zero (Source)</li>\n            <li><div className=\"legend-color\" style={{backgroundColor: COLORS.target}}></div> Critical Patient (Target)</li>\n            <li><div className=\"legend-color\" style={{backgroundColor: COLORS.firewall}}></div> Your Firewall</li>\n            <li><div className=\"legend-color\" style={{backgroundColor: COLORS.ml_suggestion}}></div> ML Suggestion</li>\n            <li><div className=\"legend-color\" style={{backgroundColor: COLORS.infected}}></div> Infected Node</li>\n            <li><div className=\"legend-color\" style={{backgroundColor: COLORS.default}}></div> Safe Node</li>\n          </ul>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO,CAAC,CAAC;AAC9D,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,SAASC,UAAU,EAAEC,aAAa,EAAEC,eAAe,QAAQ,aAAa;AACxE,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,MAAM,GAAG;EACbC,OAAO,EAAE,MAAM;EACfC,MAAM,EAAE,SAAS;EAAE;EACnBC,MAAM,EAAE,SAAS;EAAE;EACnBC,QAAQ,EAAE,SAAS;EAAE;EACrBC,aAAa,EAAE,SAAS;EAAE;EAC1BC,QAAQ,EAAE,SAAS,CAAE;AACvB,CAAC;;AAED;AACA,SAASC,UAAUA,CAAC;EAAEC;AAAY,CAAC,EAAE;EACnC,oBACEX,OAAA;IAAKY,SAAS,EAAC,aAAa;IAAAC,QAAA,eAC1Bb,OAAA;MAAKY,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3Bb,OAAA;QAAKc,GAAG,EAAC,cAAc;QAACC,GAAG,EAAC,MAAM;QAACH,SAAS,EAAC;MAAW;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3DnB,OAAA;QAAAa,QAAA,EAAI;MAAoB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7BnB,OAAA;QAAAa,QAAA,EAAG;MAAuE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC9EnB,OAAA;QAAAa,QAAA,EAAG;MAA2F;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAClGnB,OAAA;QAAQY,SAAS,EAAC,2BAA2B;QAACQ,OAAO,EAAET,WAAY;QAAAE,QAAA,EAAC;MAEpE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;;AAEA;AAAAE,EAAA,GAhBSX,UAAU;AAiBnB,SAASY,KAAKA,CAAC;EACbC,MAAM;EACNC,KAAK;EACLC,OAAO;EACPC,KAAK;EACLC,OAAO;EACPC,WAAW;EACXC,OAAO;EACPC;AACF,CAAC,EAAE;EACD,IAAI,CAACP,MAAM,EAAE;IACX,OAAO,IAAI;EACb;EAEA,oBACEvB,OAAA;IAAKY,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5Bb,OAAA;MAAKY,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5Bb,OAAA;QAAAa,QAAA,EAAKW;MAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACfO,KAAK,KAAK,IAAI,iBAAI1B,OAAA;QAAAa,QAAA,GAAI,SAAO,EAACa,KAAK;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC1CnB,OAAA;QAAAa,QAAA,EAAIY;MAAO;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBnB,OAAA;QAAKY,SAAS,EAAC,eAAe;QAAAC,QAAA,EAC3Bc,OAAO,gBACN3B,OAAA;UAAQY,SAAS,EAAC,iBAAiB;UAACQ,OAAO,EAAEQ,WAAY;UAAAf,QAAA,EAAC;QAE1D;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,gBAETnB,OAAA,CAAAE,SAAA;UAAAW,QAAA,gBACEb,OAAA;YAAQY,SAAS,EAAC,iBAAiB;YAACQ,OAAO,EAAES,OAAQ;YAAAhB,QAAA,EAAC;UAEtD;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTnB,OAAA;YAAQY,SAAS,EAAC,mBAAmB;YAACQ,OAAO,EAAEU,OAAQ;YAAAjB,QAAA,EAAC;UAExD;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,eACT;MACH;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;;AAEA;AAAAY,GAAA,GAzCST,KAAK;AA0Cd,SAASU,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG3C,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC4C,KAAK,EAAEC,QAAQ,CAAC,GAAG7C,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAAC8C,UAAU,EAAEC,aAAa,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC;EAE/C,MAAM,CAACgD,SAAS,EAAEC,YAAY,CAAC,GAAGjD,QAAQ,CAAC;IAAEkD,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;EACpE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACsD,UAAU,EAAEC,aAAa,CAAC,GAAGvD,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACwD,aAAa,EAAEC,gBAAgB,CAAC,GAAGzD,QAAQ,CAAC,IAAI0D,GAAG,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG5D,QAAQ,CAAC,IAAI0D,GAAG,CAAC,CAAC,CAAC;;EAE7D;EACA,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAG9D,QAAQ,CAAC,YAAY,CAAC;EAC5D;EACA;;EAEA,MAAM,CAAC+D,YAAY,EAAEC,eAAe,CAAC,GAAGhE,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACiE,aAAa,EAAEC,gBAAgB,CAAC,GAAGlE,QAAQ,CAAC,IAAI0D,GAAG,CAAC,CAAC,CAAC;EAE7D,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGpE,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACqE,YAAY,EAAEC,eAAe,CAAC,GAAGtE,QAAQ,CAAC;IAC/CgC,KAAK,EAAE,EAAE;IACTC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE,IAAI;IACXC,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,MAAMoC,KAAK,GAAGrE,MAAM,CAAC,CAAC;;EAEtB;EACA,MAAMsE,OAAO,GAAGvE,WAAW,CAAC,MAAM;IAChC+D,eAAe,CAAC,KAAK,CAAC;IACtB;IACA;IACAP,gBAAgB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;IAC3BE,gBAAgB,CAAC,IAAIF,GAAG,CAAC,CAAC,CAAC;IAC3BQ,gBAAgB,CAAC,IAAIR,GAAG,CAAC,CAAC,CAAC;IAC3BI,cAAc,CAAC,sBAAsB,CAAC;IAEtC1D,UAAU,CAAC,CAAC,CACTqE,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAAEC,KAAK;QAAE9D,MAAM;QAAEC;MAAO,CAAC,GAAG4D,QAAQ,CAACE,IAAI;MAC/CD,KAAK,CAACzB,KAAK,CAAC2B,OAAO,CAAEC,IAAI,IAAK;QAC5BA,IAAI,CAACC,GAAG,GAAG,CAAC,CAAC,CAAC;MAChB,CAAC,CAAC;MACF9B,YAAY,CAAC0B,KAAK,CAAC;MACnBtB,aAAa,CAACxC,MAAM,CAAC;MACrB0C,aAAa,CAACzC,MAAM,CAAC;MACrBgD,cAAc,CAAC,qCAAqC,CAAC;IACvD,CAAC,CAAC,CACDkB,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBnB,cAAc,CAAC,uCAAuC,CAAC;IACzD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMsB,SAAS,GAAGA,CAAA,KAAM;IACtBvC,QAAQ,CAAC,CAAC,CAAC;IACXE,aAAa,CAAC,CAAC,CAAC;IAChBJ,YAAY,CAAC,SAAS,CAAC;IACvB6B,OAAO,CAAC,CAAC;EACX,CAAC;;EAED;EACA,MAAMa,MAAM,GAAGA,CAAA,KAAM;IACnB1C,YAAY,CAAC,MAAM,CAAC;EACtB,CAAC;;EAED;EACA,MAAM2C,eAAe,GAAGrF,WAAW,CAChC6E,IAAI,IAAK;IACR,IAAIf,YAAY,IAAIe,IAAI,CAACS,EAAE,KAAKnC,UAAU,IAAI0B,IAAI,CAACS,EAAE,KAAKjC,UAAU,EAAE;MACpE;IACF;IACA,MAAMkC,gBAAgB,GAAG,IAAI9B,GAAG,CAACF,aAAa,CAAC;IAC/C,IAAIgC,gBAAgB,CAACC,GAAG,CAACX,IAAI,CAACS,EAAE,CAAC,EAAE;MACjCC,gBAAgB,CAACE,MAAM,CAACZ,IAAI,CAACS,EAAE,CAAC;IAClC,CAAC,MAAM;MACLC,gBAAgB,CAACG,GAAG,CAACb,IAAI,CAACS,EAAE,CAAC;IAC/B;IACA9B,gBAAgB,CAAC+B,gBAAgB,CAAC;EACpC,CAAC,EACD,CAAChC,aAAa,EAAEJ,UAAU,EAAEE,UAAU,EAAES,YAAY,CACtD,CAAC;;EAED;EACA,MAAM6B,kBAAkB,GAAGA,CAAA,KAAM;IAC/B9B,cAAc,CAAC,+BAA+B,CAAC;IAC/CxD,eAAe,CAAC0C,SAAS,EAAEI,UAAU,EAAEE,UAAU,EAAE,CAAC,CAAC,CAClDmB,IAAI,CAAEC,QAAQ,IAAK;MAClBd,gBAAgB,CAAC,IAAIF,GAAG,CAACgB,QAAQ,CAACE,IAAI,CAACiB,WAAW,CAAC,CAAC;MACpD/B,cAAc,CAAC,wBAAwB,CAAC;IAC1C,CAAC,CAAC,CACDkB,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBnB,cAAc,CAAC,+BAA+B,CAAC;IACjD,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMgC,mBAAmB,GAAGA,CAAA,KAAM;IAChC9B,eAAe,CAAC,IAAI,CAAC;IACrBF,cAAc,CAAC,uBAAuB,CAAC;IACvCI,gBAAgB,CAAC,IAAIR,GAAG,CAAC,CAACN,UAAU,CAAC,CAAC,CAAC;IACvCQ,gBAAgB,CAAC,IAAIF,GAAG,CAAC,CAAC,CAAC;IAC3B;IACA;;IAEArD,aAAa,CACX2C,SAAS,EACTI,UAAU,EACVE,UAAU,EACVyC,KAAK,CAACC,IAAI,CAACxC,aAAa,CAC1B,CAAC,CACEiB,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAAEuB,UAAU;QAAEC;MAAQ,CAAC,GAAGxB,QAAQ,CAACE,IAAI;MAC7C;MACA;;MAEA;MACA,MAAM;QAAEuB;MAAgB,CAAC,GAAGF,UAAU;MACtC,IAAIE,eAAe,CAACC,MAAM,IAAI,CAAC,EAAE;QAC/BC,mBAAmB,CAACH,OAAO,CAAC;QAC5B;MACF;MAEAC,eAAe,CAACtB,OAAO,CAAC,CAACyB,MAAM,EAAEC,KAAK,KAAK;QACzCC,UAAU,CAAC,MAAM;UACftC,gBAAgB,CAAEuC,IAAI,IAAK,IAAI/C,GAAG,CAAC+C,IAAI,CAAC,CAACd,GAAG,CAACW,MAAM,CAAC,CAAC;UACrD,IAAIC,KAAK,KAAKJ,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;YACxCC,mBAAmB,CAACH,OAAO,CAAC;UAC9B;QACF,CAAC,EAAEK,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC,CACDvB,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBjB,eAAe,CAAC,KAAK,CAAC;MACtBF,cAAc,CAAC,2BAA2B,CAAC;IAC7C,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMuC,mBAAmB,GAAIH,OAAO,IAAK;IACvC,IAAIA,OAAO,CAAChE,KAAK,GAAG,CAAC,EAAE;MACrBoC,eAAe,CAAC;QACdtC,KAAK,EAAE,uBAAuB;QAC9BC,OAAO,EAAEiE,OAAO,CAACjE,OAAO;QACxBC,KAAK,EAAEgE,OAAO,CAAChE,KAAK;QACpBC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,MAAM;MACLmC,eAAe,CAAC;QACdtC,KAAK,EAAE,yBAAyB;QAChCC,OAAO,EAAEiE,OAAO,CAACjE,OAAO;QACxBC,KAAK,EAAEgE,OAAO,CAAChE,KAAK;QACpBC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;IACAiC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EACxB,CAAC;;EAED;EACA,MAAMsC,eAAe,GAAGA,CAAA,KAAM;IAC5B3D,aAAa,CAAE4D,SAAS,IAAKA,SAAS,GAAGtC,YAAY,CAACnC,KAAK,CAAC;IAC5DW,QAAQ,CAAE+D,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;IACtCxC,cAAc,CAAC,KAAK,CAAC;IACrBI,OAAO,CAAC,CAAC;EACX,CAAC;EAED,MAAMqC,WAAW,GAAGA,CAAA,KAAM;IACxBzC,cAAc,CAAC,KAAK,CAAC;IACrBJ,eAAe,CAAC,KAAK,CAAC;IACtB;IACA;IACAP,gBAAgB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;IAC3BQ,gBAAgB,CAAC,IAAIR,GAAG,CAAC,CAAC,CAAC;IAC3BI,cAAc,CAAC,kCAAkC,CAAC;EACpD,CAAC;EAED,MAAMgD,gBAAgB,GAAGA,CAAA,KAAM;IAC7B1C,cAAc,CAAC,KAAK,CAAC;IACrBiB,MAAM,CAAC,CAAC;EACV,CAAC;;EAED;EACA,MAAM0B,YAAY,GAAG9G,WAAW,CAC7B6E,IAAI,IAAK;IACR,IAAIb,aAAa,CAACwB,GAAG,CAACX,IAAI,CAACS,EAAE,CAAC,EAAE;MAC9B,OAAO5E,MAAM,CAACM,QAAQ;IACxB;IACA,IAAI6D,IAAI,CAACS,EAAE,KAAKnC,UAAU,EAAE;MAC1B,OAAOzC,MAAM,CAACE,MAAM;IACtB;IACA,IAAIiE,IAAI,CAACS,EAAE,KAAKjC,UAAU,EAAE;MAC1B,OAAO3C,MAAM,CAACG,MAAM;IACtB;IACA,IAAI0C,aAAa,CAACiC,GAAG,CAACX,IAAI,CAACS,EAAE,CAAC,EAAE;MAC9B,OAAO5E,MAAM,CAACI,QAAQ;IACxB;IACA,IAAI4C,aAAa,CAAC8B,GAAG,CAACX,IAAI,CAACS,EAAE,CAAC,EAAE;MAC9B,OAAO5E,MAAM,CAACK,aAAa;IAC7B;IACA,OAAOL,MAAM,CAACC,OAAO;EACvB,CAAC,EACD,CAACqD,aAAa,EAAEb,UAAU,EAAEE,UAAU,EAAEE,aAAa,EAAEG,aAAa,CACtE,CAAC;;EAED;;EAEA,IAAIjB,SAAS,KAAK,MAAM,EAAE;IACxB,oBAAOlC,OAAA,CAACU,UAAU;MAACC,WAAW,EAAEiE;IAAU;MAAA5D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC/C;EAEA,oBACEnB,OAAA;IAAKY,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBb,OAAA,CAACsB,KAAK;MACJC,MAAM,EAAEoC,WAAY;MAAA,GAChBE,YAAY;MAChBjC,WAAW,EAAEsE,eAAgB;MAC7BrE,OAAO,EAAEwE,WAAY;MACrBvE,OAAO,EAAEwE;IAAiB;MAAAtF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eAEFnB,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAKY,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1Bb,OAAA;UAAKc,GAAG,EAAC,cAAc;UAACC,GAAG,EAAC,MAAM;UAACyF,KAAK,EAAE;YAAEC,MAAM,EAAE;UAAO;QAAE;UAAAzF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAChEnB,OAAA;UAAQY,SAAS,EAAC,mBAAmB;UAACQ,OAAO,EAAEyD,MAAO;UAAAhE,QAAA,EAAC;QAEvD;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACNnB,OAAA;QAAKY,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5Bb,OAAA;UAAAa,QAAA,GAAK,SAAO,eAAAb,OAAA;YAAAa,QAAA,EAASuB;UAAK;YAAApB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC1CnB,OAAA;UAAAa,QAAA,GAAK,eAAa,eAAAb,OAAA;YAAAa,QAAA,EAASyB;UAAU;YAAAtB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAETnB,OAAA;MAAKY,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7Bb,OAAA,CAACL,YAAY;QACX+G,GAAG,EAAE3C,KAAM;QACXvB,SAAS,EAAEA,SAAU;QACrBmE,SAAS,EAAEJ,YAAa;QACxBK,SAAS,EAAEA,CAAA,KAAM,MAAO;QACxBC,SAAS,EAAE,CAAE;QACbC,WAAW,EAAEhC,eAAgB;QAC7BiC,gBAAgB,EAAEA,CAACzC,IAAI,EAAE0C,GAAG,EAAEC,WAAW,KAAK;UAC5C,MAAMC,KAAK,GAAG5C,IAAI,CAACS,EAAE;UACrB,MAAMoC,QAAQ,GAAG,EAAE,GAAGF,WAAW;UACjCD,GAAG,CAACI,IAAI,GAAG,GAAGD,QAAQ,eAAe;UACrCH,GAAG,CAACK,SAAS,GAAG,QAAQ;UACxBL,GAAG,CAACM,YAAY,GAAG,QAAQ;UAC3B,MAAMC,KAAK,GAAGhB,YAAY,CAACjC,IAAI,CAAC;UAChC0C,GAAG,CAACQ,SAAS,GAAGD,KAAK;UACrBP,GAAG,CAACS,SAAS,CAAC,CAAC;UACfT,GAAG,CAACU,GAAG,CAACpD,IAAI,CAACqD,CAAC,EAAErD,IAAI,CAACsD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAGC,IAAI,CAACC,EAAE,EAAE,KAAK,CAAC;UACjDd,GAAG,CAACe,IAAI,CAAC,CAAC;UACVf,GAAG,CAACQ,SAAS,GAAG,MAAM;UACtBR,GAAG,CAACgB,QAAQ,CAACd,KAAK,EAAE5C,IAAI,CAACqD,CAAC,EAAErD,IAAI,CAACsD,CAAC,CAAC;QACrC,CAAE;QACFK,oBAAoB,EAAEA,CAAA,KAAM,OAAQ;QACpCC,eAAe,EAAE;MAAM;QAAAlH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eAEFnB,OAAA;QAAKY,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChCb,OAAA;UAAAa,QAAA,EAAI;QAAQ;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjBnB,OAAA;UAAAa,QAAA,gBAAGb,OAAA;YAAAa,QAAA,EAAQ;UAAO;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACkC,WAAW;QAAA;UAAArC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7CnB,OAAA;UACEY,SAAS,EAAC,iBAAiB;UAC3BQ,OAAO,EAAEkE,mBAAoB;UAC7B6C,QAAQ,EAAE5E,YAAa;UAAA1C,QAAA,EAEtB0C,YAAY,GAAG,eAAe,GAAG;QAAgB;UAAAvC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACTnB,OAAA;UACEY,SAAS,EAAC,iBAAiB;UAC3BQ,OAAO,EAAEgE,kBAAmB;UAC5B+C,QAAQ,EAAE5E,YAAa;UAAA1C,QAAA,EACxB;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTnB,OAAA;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACNnB,OAAA;UAAAa,QAAA,EAAI;QAAM;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACfnB,OAAA;UAAIY,SAAS,EAAC,QAAQ;UAAAC,QAAA,gBACpBb,OAAA;YAAAa,QAAA,gBAAIb,OAAA;cAAKY,SAAS,EAAC,cAAc;cAAC4F,KAAK,EAAE;gBAAC4B,eAAe,EAAEjI,MAAM,CAACE;cAAM;YAAE;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,0BAAsB;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5GnB,OAAA;YAAAa,QAAA,gBAAIb,OAAA;cAAKY,SAAS,EAAC,cAAc;cAAC4F,KAAK,EAAE;gBAAC4B,eAAe,EAAEjI,MAAM,CAACG;cAAM;YAAE;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,8BAA0B;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChHnB,OAAA;YAAAa,QAAA,gBAAIb,OAAA;cAAKY,SAAS,EAAC,cAAc;cAAC4F,KAAK,EAAE;gBAAC4B,eAAe,EAAEjI,MAAM,CAACI;cAAQ;YAAE;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,kBAAc;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtGnB,OAAA;YAAAa,QAAA,gBAAIb,OAAA;cAAKY,SAAS,EAAC,cAAc;cAAC4F,KAAK,EAAE;gBAAC4B,eAAe,EAAEjI,MAAM,CAACK;cAAa;YAAE;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,kBAAc;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3GnB,OAAA;YAAAa,QAAA,gBAAIb,OAAA;cAAKY,SAAS,EAAC,cAAc;cAAC4F,KAAK,EAAE;gBAAC4B,eAAe,EAAEjI,MAAM,CAACM;cAAQ;YAAE;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,kBAAc;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtGnB,OAAA;YAAAa,QAAA,gBAAIb,OAAA;cAAKY,SAAS,EAAC,cAAc;cAAC4F,KAAK,EAAE;gBAAC4B,eAAe,EAAEjI,MAAM,CAACC;cAAO;YAAE;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,cAAU;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/F,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACc,EAAA,CAxSQD,GAAG;AAAAqG,GAAA,GAAHrG,GAAG;AA0SZ,eAAeA,GAAG;AAAC,IAAAX,EAAA,EAAAU,GAAA,EAAAsG,GAAA;AAAAC,YAAA,CAAAjH,EAAA;AAAAiH,YAAA,CAAAvG,GAAA;AAAAuG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}