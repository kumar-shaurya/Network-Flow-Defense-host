{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Harsh\\\\VSCodeProjects\\\\maze_game\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { getNewGame, runSimulation, getMlSuggestion } from './utils/api';\nimport './App.css';\n\n// --- Color Constants ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = {\n  default: '#aaa',\n  source: '#ff4136',\n  // Red\n  target: '#0074d9',\n  // Blue\n  firewall: '#ff851b',\n  // Orange\n  ml_suggestion: '#2ecc40',\n  // Green\n  infected: '#b10dc9',\n  // Purple\n  path: '#ffdc00' // Yellow\n};\nfunction App() {\n  _s();\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    links: []\n  });\n  const [sourceNode, setSourceNode] = useState(null);\n  const [targetNode, setTargetNode] = useState(null);\n  const [selectedNodes, setSelectedNodes] = useState(new Set());\n  const [mlSuggestions, setMlSuggestions] = useState(new Set());\n  const [simulationResult, setSimulationResult] = useState(null);\n  const [gameMessage, setGameMessage] = useState('Loading a new game...');\n  const [scoringResult, setScoringResult] = useState(null);\n  const [isSimulating, setIsSimulating] = useState(false);\n  const fgRef = useRef();\n\n  // --- Animation State ---\n  // We use state to trigger re-renders during animation\n  const [infectedNodes, setInfectedNodes] = useState(new Set());\n\n  // Function to load a new game\n  const newGame = useCallback(() => {\n    setIsSimulating(false);\n    setSimulationResult(null);\n    setScoringResult(null);\n    setSelectedNodes(new Set());\n    setMlSuggestions(new Set());\n    setInfectedNodes(new Set());\n    setGameMessage('Loading new game...');\n    getNewGame().then(response => {\n      const {\n        graph,\n        source,\n        target\n      } = response.data;\n      // Set node properties for the graph\n      graph.nodes.forEach(node => {\n        node.val = 8; // node size\n      });\n      setGraphData(graph);\n      setSourceNode(source);\n      setTargetNode(target);\n      setGameMessage('Game loaded. Place your firewalls.');\n    }).catch(err => {\n      console.error(err);\n      setGameMessage('Error loading game. Please try again.');\n    });\n  }, []);\n\n  // Load game on component mount\n  useEffect(() => {\n    newGame();\n  }, [newGame]);\n\n  // Handle clicking on a node\n  const handleNodeClick = useCallback(node => {\n    if (isSimulating || node.id === sourceNode || node.id === targetNode) {\n      return; // Can't select source/target or change during simulation\n    }\n    const newSelectedNodes = new Set(selectedNodes);\n    if (newSelectedNodes.has(node.id)) {\n      newSelectedNodes.delete(node.id);\n    } else {\n      newSelectedNodes.add(node.id);\n    }\n    setSelectedNodes(newSelectedNodes);\n  }, [selectedNodes, sourceNode, targetNode, isSimulating]);\n\n  // Get ML Suggestions\n  const fetchMlSuggestions = () => {\n    setGameMessage('Calculating ML suggestions...');\n    getMlSuggestion(graphData, sourceNode, targetNode, 5) // Get top 5\n    .then(response => {\n      setMlSuggestions(new Set(response.data.top_k_nodes));\n      setGameMessage('ML suggestions loaded. Place your firewalls.');\n    }).catch(err => {\n      console.error(err);\n      setGameMessage('Error getting ML suggestions.');\n    });\n  };\n\n  // Run the Simulation\n  const handleRunSimulation = () => {\n    setIsSimulating(true);\n    setGameMessage('Simulation running...');\n    setInfectedNodes(new Set([sourceNode])); // Start with source infected\n    setMlSuggestions(new Set()); // Clear suggestions\n    setSimulationResult(null);\n    setScoringResult(null);\n    runSimulation(graphData, sourceNode, targetNode, Array.from(selectedNodes)).then(response => {\n      const {\n        simulation,\n        scoring\n      } = response.data;\n      setSimulationResult(simulation);\n      setScoringResult(scoring);\n\n      // --- Animate the result ---\n      const {\n        infection_order\n      } = simulation;\n      infection_order.forEach((nodeId, index) => {\n        setTimeout(() => {\n          // Add to infected set one by one\n          setInfectedNodes(prev => new Set(prev).add(nodeId));\n\n          // On the last node, simulation is over\n          if (index === infection_order.length - 1) {\n            setIsSimulating(false);\n            setGameMessage('Simulation complete. Check results.');\n          }\n        }, index * 200); // 200ms delay per step\n      });\n    }).catch(err => {\n      console.error(err);\n      setIsSimulating(false);\n      setGameMessage('Error running simulation.');\n    });\n  };\n\n  // --- Node Coloring Logic ---\n  const getNodeColor = useCallback(node => {\n    if (infectedNodes.has(node.id)) {\n      return COLORS.infected;\n    }\n    if (node.id === sourceNode) {\n      return COLORS.source;\n    }\n    if (node.id === targetNode) {\n      return COLORS.target;\n    }\n    if (selectedNodes.has(node.id)) {\n      return COLORS.firewall;\n    }\n    if (mlSuggestions.has(node.id)) {\n      return COLORS.ml_suggestion;\n    }\n    return COLORS.default;\n  }, [infectedNodes, sourceNode, targetNode, selectedNodes, mlSuggestions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"branding-placeholder\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/my-logo.png\",\n          alt: \"Club Logo\",\n          style: {\n            height: '40px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: newGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n        ref: fgRef,\n        graphData: graphData,\n        nodeColor: getNodeColor,\n        linkColor: () => '#333',\n        linkWidth: 2,\n        onNodeClick: handleNodeClick\n        // Highlight selected nodes\n        ,\n        nodeCanvasObject: (node, ctx, globalScale) => {\n          const label = node.id;\n          const fontSize = 12 / globalScale;\n          ctx.font = `${fontSize}px Sans-Serif`;\n          ctx.textAlign = 'center';\n          ctx.textBaseline = 'middle';\n          const color = getNodeColor(node);\n          ctx.fillStyle = color;\n\n          // Draw circle\n          ctx.beginPath();\n          ctx.arc(node.x, node.y, 6, 0, 2 * Math.PI, false);\n          ctx.fill();\n\n          // Draw label\n          ctx.fillStyle = '#fff'; // White text\n          ctx.fillText(label, node.x, node.y);\n        },\n        nodeCanvasObjectMode: () => 'after',\n        autoPauseRedraw: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 12\n        }, this), \" \", gameMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handleRunSimulation,\n        disabled: isSimulating,\n        children: isSimulating ? 'Simulating...' : 'Run Simulation'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-warning\",\n        onClick: fetchMlSuggestions,\n        disabled: isSimulating,\n        children: \"Get ML Suggestion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"legend\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: COLORS.source\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this), \" Patient Zero (Source)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: COLORS.target\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), \" Critical Patient (Target)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: COLORS.firewall\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), \" Your Firewall\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: COLORS.ml_suggestion\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), \" ML Suggestion\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: COLORS.infected\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this), \" Infected Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: COLORS.default\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this), \" Safe Node\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), scoringResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `results-panel ${scoringResult.score > 0 ? 'success' : 'failure'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Game Over!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Final Score: \", scoringResult.score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: scoringResult.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CwM7OgLYSyLLQZiT8lsCgKfRyxs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","ForceGraph2D","getNewGame","runSimulation","getMlSuggestion","jsxDEV","_jsxDEV","COLORS","default","source","target","firewall","ml_suggestion","infected","path","App","_s","graphData","setGraphData","nodes","links","sourceNode","setSourceNode","targetNode","setTargetNode","selectedNodes","setSelectedNodes","Set","mlSuggestions","setMlSuggestions","simulationResult","setSimulationResult","gameMessage","setGameMessage","scoringResult","setScoringResult","isSimulating","setIsSimulating","fgRef","infectedNodes","setInfectedNodes","newGame","then","response","graph","data","forEach","node","val","catch","err","console","error","handleNodeClick","id","newSelectedNodes","has","delete","add","fetchMlSuggestions","top_k_nodes","handleRunSimulation","Array","from","simulation","scoring","infection_order","nodeId","index","setTimeout","prev","length","getNodeColor","className","children","src","alt","style","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","nodeColor","linkColor","linkWidth","onNodeClick","nodeCanvasObject","ctx","globalScale","label","fontSize","font","textAlign","textBaseline","color","fillStyle","beginPath","arc","x","y","Math","PI","fill","fillText","nodeCanvasObjectMode","autoPauseRedraw","disabled","backgroundColor","score","message","_c","$RefreshReg$"],"sources":["C:/Users/Harsh/VSCodeProjects/maze_game/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { getNewGame, runSimulation, getMlSuggestion } from './utils/api';\nimport './App.css';\n\n// --- Color Constants ---\nconst COLORS = {\n  default: '#aaa',\n  source: '#ff4136', // Red\n  target: '#0074d9', // Blue\n  firewall: '#ff851b', // Orange\n  ml_suggestion: '#2ecc40', // Green\n  infected: '#b10dc9', // Purple\n  path: '#ffdc00', // Yellow\n};\n\nfunction App() {\n  const [graphData, setGraphData] = useState({ nodes: [], links: [] });\n  const [sourceNode, setSourceNode] = useState(null);\n  const [targetNode, setTargetNode] = useState(null);\n  const [selectedNodes, setSelectedNodes] = useState(new Set());\n  const [mlSuggestions, setMlSuggestions] = useState(new Set());\n  const [simulationResult, setSimulationResult] = useState(null);\n  const [gameMessage, setGameMessage] = useState('Loading a new game...');\n  const [scoringResult, setScoringResult] = useState(null);\n  const [isSimulating, setIsSimulating] = useState(false);\n\n  const fgRef = useRef();\n\n  // --- Animation State ---\n  // We use state to trigger re-renders during animation\n  const [infectedNodes, setInfectedNodes] = useState(new Set());\n\n  // Function to load a new game\n  const newGame = useCallback(() => {\n    setIsSimulating(false);\n    setSimulationResult(null);\n    setScoringResult(null);\n    setSelectedNodes(new Set());\n    setMlSuggestions(new Set());\n    setInfectedNodes(new Set());\n    setGameMessage('Loading new game...');\n\n    getNewGame()\n      .then((response) => {\n        const { graph, source, target } = response.data;\n        // Set node properties for the graph\n        graph.nodes.forEach((node) => {\n          node.val = 8; // node size\n        });\n\n        setGraphData(graph);\n        setSourceNode(source);\n        setTargetNode(target);\n        setGameMessage('Game loaded. Place your firewalls.');\n      })\n      .catch((err) => {\n        console.error(err);\n        setGameMessage('Error loading game. Please try again.');\n      });\n  }, []);\n\n  // Load game on component mount\n  useEffect(() => {\n    newGame();\n  }, [newGame]);\n\n  // Handle clicking on a node\n  const handleNodeClick = useCallback(\n    (node) => {\n      if (isSimulating || node.id === sourceNode || node.id === targetNode) {\n        return; // Can't select source/target or change during simulation\n      }\n\n      const newSelectedNodes = new Set(selectedNodes);\n      if (newSelectedNodes.has(node.id)) {\n        newSelectedNodes.delete(node.id);\n      } else {\n        newSelectedNodes.add(node.id);\n      }\n      setSelectedNodes(newSelectedNodes);\n    },\n    [selectedNodes, sourceNode, targetNode, isSimulating]\n  );\n\n  // Get ML Suggestions\n  const fetchMlSuggestions = () => {\n    setGameMessage('Calculating ML suggestions...');\n    getMlSuggestion(graphData, sourceNode, targetNode, 5) // Get top 5\n      .then((response) => {\n        setMlSuggestions(new Set(response.data.top_k_nodes));\n        setGameMessage('ML suggestions loaded. Place your firewalls.');\n      })\n      .catch((err) => {\n        console.error(err);\n        setGameMessage('Error getting ML suggestions.');\n      });\n  };\n\n  // Run the Simulation\n  const handleRunSimulation = () => {\n    setIsSimulating(true);\n    setGameMessage('Simulation running...');\n    setInfectedNodes(new Set([sourceNode])); // Start with source infected\n    setMlSuggestions(new Set()); // Clear suggestions\n    setSimulationResult(null);\n    setScoringResult(null);\n\n    runSimulation(\n      graphData,\n      sourceNode,\n      targetNode,\n      Array.from(selectedNodes)\n    )\n      .then((response) => {\n        const { simulation, scoring } = response.data;\n        setSimulationResult(simulation);\n        setScoringResult(scoring);\n\n        // --- Animate the result ---\n        const { infection_order } = simulation;\n        infection_order.forEach((nodeId, index) => {\n          setTimeout(() => {\n            // Add to infected set one by one\n            setInfectedNodes((prev) => new Set(prev).add(nodeId));\n            \n            // On the last node, simulation is over\n            if (index === infection_order.length - 1) {\n              setIsSimulating(false);\n              setGameMessage('Simulation complete. Check results.');\n            }\n          }, index * 200); // 200ms delay per step\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        setIsSimulating(false);\n        setGameMessage('Error running simulation.');\n      });\n  };\n\n  // --- Node Coloring Logic ---\n  const getNodeColor = useCallback(\n    (node) => {\n      if (infectedNodes.has(node.id)) {\n        return COLORS.infected;\n      }\n      if (node.id === sourceNode) {\n        return COLORS.source;\n      }\n      if (node.id === targetNode) {\n        return COLORS.target;\n      }\n      if (selectedNodes.has(node.id)) {\n        return COLORS.firewall;\n      }\n      if (mlSuggestions.has(node.id)) {\n        return COLORS.ml_suggestion;\n      }\n      return COLORS.default;\n    },\n    [infectedNodes, sourceNode, targetNode, selectedNodes, mlSuggestions]\n  );\n\n  return (\n    <div className=\"App\">\n    <header>\n        {/* LEAVE SPACE FOR CLUB BRANDING HERE */}\n        <div className=\"branding-placeholder\">\n          {/* Add your logo file (e.g., \"my-logo.png\") \n            to the \"frontend/public/\" folder \n          */}\n          <img src=\"/my-logo.png\" alt=\"Club Logo\" style={{ height: '40px' }} />\n        </div>\n        <button className=\"btn btn-secondary\" onClick={newGame}>\n          New Game\n        </button>\n      </header>\n\n      <div className=\"game-container\">\n        <ForceGraph2D\n          ref={fgRef}\n          graphData={graphData}\n          nodeColor={getNodeColor}\n          linkColor={() => '#333'}\n          linkWidth={2}\n          onNodeClick={handleNodeClick}\n          // Highlight selected nodes\n          nodeCanvasObject={(node, ctx, globalScale) => {\n            const label = node.id;\n            const fontSize = 12 / globalScale;\n            ctx.font = `${fontSize}px Sans-Serif`;\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            \n            const color = getNodeColor(node);\n            ctx.fillStyle = color;\n            \n            // Draw circle\n            ctx.beginPath();\n            ctx.arc(node.x, node.y, 6, 0, 2 * Math.PI, false);\n            ctx.fill();\n\n            // Draw label\n            ctx.fillStyle = '#fff'; // White text\n            ctx.fillText(label, node.x, node.y);\n          }}\n          nodeCanvasObjectMode={() => 'after'}\n          autoPauseRedraw={false}\n        />\n      </div>\n\n      <aside className=\"sidebar\">\n        <h2>Controls</h2>\n        <p><strong>Status:</strong> {gameMessage}</p>\n        <button\n          className=\"btn btn-primary\"\n          onClick={handleRunSimulation}\n          disabled={isSimulating}\n        >\n          {isSimulating ? 'Simulating...' : 'Run Simulation'}\n        </button>\n        <button\n          className=\"btn btn-warning\"\n          onClick={fetchMlSuggestions}\n          disabled={isSimulating}\n        >\n          Get ML Suggestion\n        </button>\n\n        <hr />\n        <h2>Legend</h2>\n        <ul className=\"legend\">\n          <li><div className=\"legend-color\" style={{backgroundColor: COLORS.source}}></div> Patient Zero (Source)</li>\n          <li><div className=\"legend-color\" style={{backgroundColor: COLORS.target}}></div> Critical Patient (Target)</li>\n          <li><div className=\"legend-color\" style={{backgroundColor: COLORS.firewall}}></div> Your Firewall</li>\n          <li><div className=\"legend-color\" style={{backgroundColor: COLORS.ml_suggestion}}></div> ML Suggestion</li>\n          <li><div className=\"legend-color\" style={{backgroundColor: COLORS.infected}}></div> Infected Node</li>\n          <li><div className=\"legend-color\" style={{backgroundColor: COLORS.default}}></div> Safe Node</li>\n        </ul>\n\n        {scoringResult && (\n          <div className={`results-panel ${scoringResult.score > 0 ? 'success' : 'failure'}`}>\n            <h3>Game Over!</h3>\n            <p><strong>Final Score: {scoringResult.score}</strong></p>\n            <p>{scoringResult.message}</p>\n          </div>\n        )}\n      </aside>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}